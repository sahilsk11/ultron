{"version":3,"sources":["Pi/PiApp.jsx","Chat/Chat.jsx","App.js","actionLauncher.js","serviceWorker.js","index.js"],"names":["PiApp","content","message","transcript","startSession","closeSession","state","intentResponse","updateState","screens","sleepClock","SleepClock","className","onClick","src","alt","AmbientScreen","ActionScreen","greeting","ResponseScreen","href","rel","gif","useState","time","updateTime","useInterval","currentTime","Date","toLocaleTimeString","toString","lastColon","lastIndexOf","cleanedTimeStr","substring","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","Chat","input","updateInput","value","onChange","e","target","Index","lastTranscriptUpdate","setUpdateTime","useSpeechRecognition","listening","resetTranscript","setMessage","setIntent","wakeWords","SpeechRecognition","browserSupportsSpeechRecognition","alert","console","log","stopListening","startListening","continuous","endSession","a","onAudioFinish","send","cleanTranscript","word","includes","wakeWordSpoken","toLocaleLowerCase","toLowerCase","timeDiff","timeTreshold","props","updateMessage","sendProps","queryString","window","location","search","URLSearchParams","get","App","apiKey","localStorage","getItem","prompt","length","setItem","getApiToken","host","fetch","method","headers","body","JSON","stringify","api_key","generateAudio","then","response","status","json","Error","data","intent","code","open","url","update","setTimeout","reload","actionLauncher","audio","Audio","fileName","play","addEventListener","catch","error","AppWrapper","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.48884024.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./pi.css\";\n\nexport default function PiApp({\n  message,\n  transcript,\n  startSession,\n  closeSession,\n  state,\n  intentResponse,\n  updateState\n}) {\n  let content;\n  const screens = {\n    sleepClock: SleepClock({ updateState })\n  }\n  if (state === \"ambient\") {\n    content = AmbientScreen({ startSession });\n  } else if (state === \"listening\") {\n    content = ActionScreen({ closeSession, greeting: \"listening...\", state, transcript });\n  } else if (state === \"processing\") {\n    content = ActionScreen({ closeSession, greeting: \"thinking...\", state });\n  } else if (state === \"sleep\") {\n    //return SleepMode({ updateState });\n    content = screens.sleepClock;\n  } else if (state === \"response\") {\n    content = ResponseScreen({ intentResponse, message, updateState });\n  }\n  return (\n    <div className=\"pi-wrapper\">\n      {content}\n      <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@400&display=swap\" rel=\"stylesheet\" />\n    </div>\n  )\n}\n\nfunction AmbientScreen({ startSession }) {\n  return (\n    <img\n      className=\"pi-ambient\"\n      onClick={() => startSession()}\n      src=\"pi-ambient.gif\"\n      alt=\"\"\n    />\n  );\n}\n\nfunction ActionScreen({ closeSession, greeting, state, transcript }) {\n  const gif = state === \"listening\" ? ListeningWaves() : Processing();\n  return (\n    <div onClick={() => closeSession()} className=\"pi-active-container\">\n      <h1 className=\"pi-greeting\"><em>{greeting}</em></h1>\n      <div className=\"pi-transcript-wrapper\">\n        <p className=\"pi-transcript\"><em>{transcript}</em></p>\n      </div>\n      {gif}\n    </div >\n  );\n}\n\nfunction ResponseScreen({ intentResponse, message, updateState }) {\n  return (\n    <div className=\"pi-active-container\" onClick={() => updateState(\"ambient\")}>\n      <h1 className=\"pi-greeting\"><em>{intentResponse}</em></h1>\n      <div className=\"pi-transcript-wrapper\">\n        <p className=\"pi-transcript\"><em>{message}</em></p>\n      </div>\n    </div>\n  )\n}\n\nfunction ListeningWaves() {\n  return (\n    <img src=\"./pi-listening.gif\" className=\"pi-listening\" alt=\"\" />\n  );\n}\n\nfunction Processing() {\n  return (\n    <div className=\"spinner\">\n      <div className=\"bounce1\"></div>\n      <div className=\"bounce2\"></div>\n      <div className=\"bounce3\"></div>\n    </div>\n  );\n}\n\nfunction SleepMode({ updateState }) {\n  return (\n    <div className=\"pi-sleep-container\" onClick={() => updateState(\"ambient\")} />\n  );\n}\n\n/*\n * Clock for sleep mode\n * HH:MM PM/AM\n */\nfunction SleepClock({ updateState }) {\n  const [time, updateTime] = useState(\"\");\n  useInterval(() => {\n    const currentTime = new Date().toLocaleTimeString().toString();\n    const lastColon = currentTime.lastIndexOf(\":\");\n    const cleanedTimeStr = currentTime.substring(0, lastColon) + currentTime.substring(lastColon + 3);\n    updateTime(cleanedTimeStr);\n  }, 1000);\n  return (\n    <div className=\"pi-backdrop\" onClick={() => updateState(\"ambient\")}>\n      <h3 className=\"pi-clock\">{time}</h3>\n    </div>\n  )\n}\n\n/*\n * Clock in listening mode\n */\nfunction ActiveClock({ startSession }) {\n  const [time, updateTime] = useState(\"\");\n  useInterval(() => {\n    const currentTime = new Date().toLocaleTimeString().toString();\n    const lastColon = currentTime.lastIndexOf(\":\");\n    const cleanedTimeStr = currentTime.substring(0, lastColon) + currentTime.substring(lastColon + 3);\n    updateTime(cleanedTimeStr);\n  }, 1000);\n  return (\n    <div>\n      <h3 className=\"pi-clock\">{time}</h3>\n      <img\n        className=\"pi-ambient-clock\"\n        onClick={() => startSession()}\n        src=\"pi-ambient.gif\"\n        alt=\"\"\n      />\n    </div>\n  )\n}\n\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}","import React, { useState } from \"react\";\n\nexport default function Chat() {\n  const [input, updateInput] = useState(\"\");\n  return (\n    <div>\n      <input value={input} onChange={e => updateInput(e.target.value)} />\n      <button>send</button>\n    </div>\n  )\n}","import React, { useState, useEffect, useRef } from \"react\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport actionLauncher from \"./actionLauncher\";\nimport \"./App.css\"\nimport PiApp from \"./Pi/PiApp\";\nimport Chat from \"./Chat/Chat\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction Index() {\n  const [lastTranscriptUpdate, setUpdateTime] = useState(null);\n  const { listening, transcript, resetTranscript } = useSpeechRecognition();\n  const [state, updateState] = useState(\"ambient\");\n  const [message, setMessage] = useState(\"Hello, Sahil.\");\n  const [intentResponse, setIntent] = useState(null);\n\n  const wakeWords = [\"okay ultron\", \"jarvis\"];\n\n  //https://www.npmjs.com/package/react-mic\n\n  useEffect(() => {\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n      alert(\"Unsupported Browser\");\n    }\n  }, []);\n\n  console.log(state);\n  if (state === \"sleep\" && listening) {\n    SpeechRecognition.stopListening();\n  } else if (state !== \"sleep\" && !listening) {\n    SpeechRecognition.startListening({ continuous: true });\n  }\n\n  const startSession = () => {\n    resetTranscript();\n    setMessage(\"Go ahead...\");\n    setUpdateTime(new Date());\n    updateState(\"listening\");\n  }\n\n  const endSession = async () => {\n    setMessage(\"processing...\")\n    updateState(\"processing\");\n    const onAudioFinish = () => {\n      resetTranscript();\n      SpeechRecognition.startListening({ continuous: true });\n    }\n    SpeechRecognition.stopListening();\n    send({ transcript, resetTranscript, setMessage, setIntent, updateState, onAudioFinish });\n  }\n\n  useEffect(() => {\n    setUpdateTime(new Date());\n  }, [transcript]);\n\n  const wakeWordSpoken = (cleanTranscript) => {\n    console.log(cleanTranscript)\n    for (const word of wakeWords) {\n      if (cleanTranscript.includes(word)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  if (state !== \"listening\") {\n    if (wakeWordSpoken(transcript.toLocaleLowerCase())) {\n      resetTranscript();\n      startSession();\n    } else if (listening && state === \"response\") {\n      if (transcript.toLowerCase().includes(\"clear\")) {\n        resetTranscript();\n        updateState(\"ambient\");\n      }\n    }\n  }\n\n  useInterval(() => {\n    if (transcript !== '' && state === \"listening\") {\n      const timeDiff = (new Date() - lastTranscriptUpdate) / 1000;\n      let timeTreshold = 2;\n      if (transcript.includes(\"add weight\") && !transcript.includes(\"send\")) {\n        timeTreshold = 60;\n      }\n      if (timeDiff > timeTreshold) {\n        endSession();\n      }\n    }\n  }, transcript !== '' && state === \"listening\" ? 1000 : null);\n\n  const props = {\n    message,\n    intentResponse,\n    transcript: state === 'listening' ? transcript : '',\n    startSession,\n    state,\n    updateState,\n    updateMessage: setMessage\n  }\n  const sendProps = {\n    resetTranscript, setMessage, setIntent, updateState, onAudioFinish: () => resetTranscript()\n  }\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const device = urlParams.get('device');\n  if (device === \"pi\") {\n    return PiApp(props)\n  } else {\n    return App({ ...props, sendProps });\n  }\n}\n\nfunction App({\n  message,\n  updateMessage,\n  listening,\n  stopListening,\n  startSession,\n  transcript,\n  sendProps\n}) {\n  return (\n    <div className=\"app-container\">\n      <h2 className=\"greeting\">{message}</h2>\n      <div className=\"voice-icon-wrapper\" onClick={() => { listening ? stopListening() : startSession() }}>\n        <img className=\"voice-icon\"\n          src=\"https://cdn.dribbble.com/users/32512/screenshots/5668419/calm_ai_design_by_gleb.gif\"\n          alt=\"\"\n        />\n      </div>\n      <p className=\"transcript\"><em>{transcript}</em></p>\n      <p className=\"credit\">animation design by <a href=\"https://dribbble.com/glebich\" target=\"_blank\">Gleb Kuznetsov</a></p>\n      <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@200;300;400&display=swap\" rel=\"stylesheet\" />\n    </div>\n  );\n}\n\nconst MessageInput = ({ message, updateMessage, sendProps }) => {\n  const handleSubmit = (e) => {\n    if (e.charCode == 13) {\n      send({ transcript: message, ...sendProps });\n    }\n  }\n  return (\n    <input className=\"transcript-input\" value={message} onChange={e => updateMessage(e.target.value)} onKeyPress={(e) => handleSubmit(e)} />\n  )\n}\n\nconst getApiToken = () => {\n  let apiKey = localStorage.getItem('api_key');\n  if (!apiKey) {\n    apiKey = prompt(\"Enter device api key\");\n    if (!!apiKey && apiKey.length > 5)\n      localStorage.setItem('api_key', apiKey);\n  }\n  return apiKey;\n}\n\nconst send = ({ transcript, resetTranscript, setMessage, setIntent, updateState, onAudioFinish }) => {\n  let apiKey = getApiToken();\n  const simulateProd = false;\n  const host = simulateProd || process.env.NODE_ENV === \"production\" ? \"https://www.ultron.sh/server\" : \"http://localhost:8080\";\n  //let params = \"?transcript=\" + transcript.toLowerCase();\n  //params += \"&api_key=\" + apiKey;\n  try {\n    fetch(host, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        transcript,\n        api_key: apiKey,\n        generateAudio: true\n      })\n    })\n      .then(response => {\n        if (response.status === 200) {\n          return response.json();\n        } else {\n          setMessage(\"Error in request\");\n          updateState(\"Error\");\n          throw Error(`Request rejected`)\n        }\n      }).then(data => {\n        const { intent, message, code } = data;\n        if (message === \"Invalid credentials\") {\n          apiKey = prompt(\"Enter device api key\");\n          if (!!apiKey && apiKey.length > 5)\n            localStorage.setItem('api_key', apiKey);\n        }\n        setIntent(intent);\n        setMessage(message);\n        updateState(\"response\");\n        actionLauncher({ data, updateState, resetTranscript });\n        const audio = new Audio(host + '/audioFile?fileName=' + data.fileName);\n        audio.play();\n        audio.addEventListener(\"ended\", data => onAudioFinish(data));\n      }).catch(error => {\n        console.error(error);\n        updateState(\"error\");\n        setMessage(error.message);\n      });\n  } catch (error) {\n    alert();\n  }\n}\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nfunction AppWrapper() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/chat\">\n          <Chat />\n        </Route>\n        <Route path=\"/\">\n          <Index />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nsetInterval(AppWrapper, 1000);\n\nexport default AppWrapper;\n","export default function actionLauncher({ data, updateState, resetTranscript }) {\n  const { message, intent } = data;\n  resetTranscript();\n  if (intent === \"launch\") {\n    window.open(data.url);\n  } else if (intent === \"hardwareSleepIntent\" || intent === \"closeShopIntent\") {\n    updateState(\"sleep\");\n  } else if (intent === \"pullLatestVersion\") {\n    if (data.update) {\n      setTimeout(() => window.location.reload(), 6000);\n    }\n  } else if (intent == \"clearIntent\") {\n    updateState(\"ambient\");\n  }\n\n  return { message, intent };\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}