{"version":3,"sources":["actionLauncher.js","Pi/PiApp.jsx","App.js","serviceWorker.js","index.js"],"names":["actionLauncher","data","message","setMessage","intent","window","open","url","PiApp","content","transcript","startSession","closeSession","state","intentResponse","updateState","ambient","className","onClick","src","alt","active","ActionScreen","greeting","processing","response","ResponseScreen","console","log","href","rel","gif","class","send","a","setIntent","params","toLowerCase","fetch","then","json","msg","SpeechSynthesisUtterance","speechSynthesis","speak","Index","useState","lastTranscriptUpdate","setUpdateTime","useSpeechRecognition","listening","resetTranscript","Date","SpeechRecognition","startListening","continuous","endSession","setTimeout","useEffect","includes","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","props","queryString","location","search","URLSearchParams","get","stopListening","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.30425c0c.chunk.js","sourcesContent":["export default function actionLauncher({ data, setMessage }) {\n  let message = data.message;\n  let intent = data.intent;\n  if (data.intent === \"unknown\") message = \"I don't quite understand\";\n  // if (data.code !== 200) {\n  //   setMessage(data.message);\n  //   return;\n  // }\n  if (data.intent === \"launch\") {\n    window.open(data.url);\n    //setMessage(\"Launching \" + data.app + \"...\");\n  }\n  return { message, intent };\n}","import React from \"react\";\nimport \"./pi.css\";\n\nexport default function PiApp({\n  message,\n  transcript,\n  startSession,\n  closeSession,\n  state,\n  intentResponse,\n  updateState\n}) {\n  const ambient = (\n    <img\n      className=\"pi-ambient\"\n      onClick={() => startSession()}\n      src=\"pi-ambient.gif\"\n      alt=\"\"\n    />\n  );\n  const active = ActionScreen({ closeSession, greeting: \"listening...\", state, transcript });\n  const processing = ActionScreen({ closeSession, greeting: \"thinking...\", state });\n  const response = ResponseScreen({ intentResponse, message, updateState });\n  let content;\n  console.log(state)\n  if (state === \"ambient\") {\n    content = ambient;\n  } else if (state === \"listening\") {\n    content = active;\n  } else if (state === \"processing\") {\n    content = processing;\n  } else {\n    console.log(message);\n    content = response;\n  }\n  return (\n    <div className=\"pi-wrapper\">\n      {content}\n      <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@400&display=swap\" rel=\"stylesheet\" />\n    </div>\n  )\n}\n\nfunction ActionScreen({ closeSession, greeting, state, transcript }) {\n  const gif = state === \"listening\" ? ListeningWaves() : Processing();\n  return (\n    <div onClick={() => closeSession()} className=\"pi-active-container\">\n      <h1 className=\"pi-greeting\"><em>{greeting}</em></h1>\n      <div className=\"pi-transcript-wrapper\">\n        <p className=\"pi-transcript\"><em>{transcript}</em></p>\n      </div>\n      {gif}\n    </div >\n  );\n}\n\nfunction ResponseScreen({ intentResponse, message, updateState }) {\n  return (\n    <div className=\"pi-active-container\" onClick={()=>updateState(\"ambient\")}>\n      <h1 className=\"pi-greeting\"><em>{intentResponse}</em></h1>\n      <div className=\"pi-transcript-wrapper\">\n        <p className=\"pi-transcript\"><em>{message}</em></p>\n      </div>\n    </div>\n  )\n}\n\nfunction ListeningWaves() {\n  const gif = <img src=\"./pi-listening.gif\" className=\"pi-listening\" alt=\"\" />;\n  return gif;\n}\n\nfunction Processing() {\n  const loading = (\n    <div class=\"spinner\">\n      <div class=\"bounce1\"></div>\n      <div class=\"bounce2\"></div>\n      <div class=\"bounce3\"></div>\n    </div>\n  );\n  return loading;\n}","import React, { useState, useEffect, useRef } from \"react\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport actionLauncher from \"./actionLauncher\";\nimport \"./App.css\"\nimport PiApp from \"./Pi/PiApp\";\n\nfunction Index() {\n  const [lastTranscriptUpdate, setUpdateTime] = useState(null);\n  const { listening, transcript, resetTranscript } = useSpeechRecognition();\n  const [state, updateState] = useState(\"ambient\");\n  const [message, setMessage] = useState(\"Hello, Sahil.\");\n  const [intentResponse, setIntent] = useState(null);\n\n  const startSession = () => {\n    setMessage(\"Go ahead...\");\n    setUpdateTime(new Date());\n    updateState(\"listening\");\n    SpeechRecognition.startListening({ continuous: true });\n  }\n\n  const endSession = async () => {\n    setMessage(\"processing...\")\n    updateState(\"processing\");\n    await send({ transcript, setMessage, setIntent });\n    resetTranscript();\n    updateState(\"response\");\n    setTimeout(() => {\n      if (state === \"response\") updateState(\"ambient\")\n    }, 10000)\n    //updateIntent\n  }\n\n  const closeSession = () => {\n    setMessage(\"Hello, Sahil.\");\n    updateState(\"ambient\");\n  }\n\n  useEffect(() => setUpdateTime(new Date()), [transcript]);\n\n  if (state === \"ambient\" && !listening) {\n    SpeechRecognition.startListening({ continuous: true });\n  }\n\n  if (state !== \"listening\") {\n    if (transcript.toLowerCase().includes(\"ultron\")) {\n      resetTranscript();\n      startSession();\n    }\n  }\n\n  if (state === \"response\") {\n    if (transcript.toLowerCase().includes(\"clear\")) {\n      resetTranscript();\n      closeSession();\n    }\n  }\n\n  useInterval(() => {\n    if (transcript !== '' && state === \"listening\") {\n      const timeDiff = (new Date() - lastTranscriptUpdate) / 1000;\n      if (timeDiff > 2) {\n        endSession();\n      }\n    }\n  }, transcript !== '' && state === \"listening\" ? 1000 : null);\n\n  const props = {\n    message,\n    intentResponse,\n    transcript,\n    startSession,\n    closeSession,\n    state,\n    updateState\n  }\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const device = urlParams.get('device');\n  if (device === \"pi\") {\n    return PiApp(props)\n  } else {\n    return App(props);\n  }\n}\n\nfunction App({\n  message,\n  listening,\n  stopListening,\n  startSession,\n  transcript\n}) {\n  return (\n    <div className=\"app-container\">\n      <h2 className=\"greeting\">{message}</h2>\n      <div className=\"voice-icon-wrapper\" onClick={() => { listening ? stopListening() : startSession({ continuous: true }) }}>\n        <img className=\"voice-icon\"\n          src=\"https://cdn.dribbble.com/users/32512/screenshots/5668419/calm_ai_design_by_gleb.gif\"\n          alt=\"\"\n        />\n      </div>\n      <p className=\"transcript\"><em>{transcript}</em></p>\n      <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@200&display=swap\" rel=\"stylesheet\" />\n    </div>\n  );\n}\n\nconst send = async ({ transcript, setMessage, setIntent }) => {\n  const simulateProd = false;\n  const endpoint = simulateProd || process.env.NODE_ENV === \"production\" ? \"https://api.sahilkapur.com/setIntent\" : \"http://192.168.2.97:8080/setIntent\";\n  const params = \"?transcript=\" + transcript.toLowerCase();\n  fetch(endpoint + params)\n    .then(response => response.json())\n    .then(data => {\n      const { intent, message } = actionLauncher({ data, setMessage });\n      setIntent(intent);\n      setMessage(message);\n\n      const msg = new SpeechSynthesisUtterance(message);\n      window.speechSynthesis.speak(msg);\n    });\n}\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default Index;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}