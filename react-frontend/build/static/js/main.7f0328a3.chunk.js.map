{"version":3,"sources":["Pi/PiApp.jsx","App.js","actionLauncher.js","serviceWorker.js","index.js"],"names":["PiApp","content","message","transcript","startSession","closeSession","state","intentResponse","updateState","className","onClick","src","alt","AmbientScreen","ActionScreen","greeting","SleepMode","ResponseScreen","href","rel","gif","send","setMessage","setIntent","onAudioFinish","host","params","toLowerCase","fetch","then","response","status","json","Error","data","intent","window","open","url","update","setTimeout","location","reload","actionLauncher","audio","Audio","fileName","play","addEventListener","catch","error","console","alert","Index","useState","lastTranscriptUpdate","setUpdateTime","useSpeechRecognition","listening","resetTranscript","useEffect","SpeechRecognition","browserSupportsSpeechRecognition","log","stopListening","startListening","continuous","Date","useRef","current","endSession","a","includes","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","timeDiff","timeTreshold","allClear","metric","props","queryString","search","URLSearchParams","get","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f0328a3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./pi.css\";\n\nexport default function PiApp({\n  message,\n  transcript,\n  startSession,\n  closeSession,\n  state,\n  intentResponse,\n  updateState\n}) {\n  let content;\n  if (state === \"ambient\") {\n    content = AmbientScreen({ startSession });\n  } else if (state === \"listening\") {\n    content = ActionScreen({ closeSession, greeting: \"listening...\", state, transcript });\n  } else if (state === \"processing\") {\n    content = ActionScreen({ closeSession, greeting: \"thinking...\", state });\n  } else if (state === \"sleep\") {\n    return SleepMode({ updateState });\n  } else if (state === \"response\") {\n    content = ResponseScreen({ intentResponse, message, updateState });\n  }\n  return (\n    <div className=\"pi-wrapper\">\n      {content}\n      <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@400&display=swap\" rel=\"stylesheet\" />\n    </div>\n  )\n}\n\nfunction AmbientScreen({ startSession }) {\n  return (\n    <img\n      className=\"pi-ambient\"\n      onClick={() => startSession()}\n      src=\"pi-ambient.gif\"\n      alt=\"\"\n    />\n  );\n}\n\nfunction ActionScreen({ closeSession, greeting, state, transcript }) {\n  const gif = state === \"listening\" ? ListeningWaves() : Processing();\n  return (\n    <div onClick={() => closeSession()} className=\"pi-active-container\">\n      <h1 className=\"pi-greeting\"><em>{greeting}</em></h1>\n      <div className=\"pi-transcript-wrapper\">\n        <p className=\"pi-transcript\"><em>{transcript}</em></p>\n      </div>\n      {gif}\n    </div >\n  );\n}\n\nfunction ResponseScreen({ intentResponse, message, updateState }) {\n  return (\n    <div className=\"pi-active-container\" onClick={() => updateState(\"ambient\")}>\n      <h1 className=\"pi-greeting\"><em>{intentResponse}</em></h1>\n      <div className=\"pi-transcript-wrapper\">\n        <p className=\"pi-transcript\"><em>{message}</em></p>\n      </div>\n    </div>\n  )\n}\n\nfunction ListeningWaves() {\n  return (\n    <img src=\"./pi-listening.gif\" className=\"pi-listening\" alt=\"\" />\n  );\n}\n\nfunction Processing() {\n  return (\n    <div className=\"spinner\">\n      <div className=\"bounce1\"></div>\n      <div className=\"bounce2\"></div>\n      <div className=\"bounce3\"></div>\n    </div>\n  );\n}\n\nfunction SleepMode({ updateState }) {\n  return (\n    <div className=\"pi-sleep-container\" onClick={() => updateState(\"ambient\")} />\n  );\n}","import React, { useState, useEffect, useRef } from \"react\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport actionLauncher from \"./actionLauncher\";\nimport \"./App.css\"\nimport PiApp from \"./Pi/PiApp\";\n\nfunction Index() {\n  const [lastTranscriptUpdate, setUpdateTime] = useState(null);\n  const { listening, transcript, resetTranscript } = useSpeechRecognition();\n  const [state, updateState] = useState(\"ambient\");\n  const [message, setMessage] = useState(\"Hello, Sahil.\");\n  const [intentResponse, setIntent] = useState(null);\n\n  //https://www.npmjs.com/package/react-mic\n\n  useEffect(() => {\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n      alert(\"Unsupported Browser\");\n    }\n  }, []);\n  console.log(state);\n  if (state === \"sleep\" && listening) {\n    SpeechRecognition.stopListening();\n  } else if (state !== \"sleep\" && !listening) {\n    SpeechRecognition.startListening({ continuous: true });\n  }\n\n  const startSession = () => {\n    setMessage(\"Go ahead...\");\n    setUpdateTime(new Date());\n    updateState(\"listening\");\n    SpeechRecognition.startListening({ continuous: true });\n  }\n\n  const stateRef = useRef(state);\n  stateRef.current = state;\n\n  const endSession = async () => {\n    setMessage(\"processing...\")\n    updateState(\"processing\");\n    const onAudioFinish = () => {\n      resetTranscript();\n      SpeechRecognition.startListening({ continuous: true });\n    }\n    SpeechRecognition.stopListening();\n    send({ transcript, setMessage, setIntent, updateState, onAudioFinish });\n  }\n\n  useEffect(() => {\n    setUpdateTime(new Date());\n    \n  }, [transcript]);\n\n  if (state !== \"listening\") {\n    if (transcript.toLowerCase().includes(\"ultron\")) {\n      resetTranscript();\n      startSession();\n    } else if (listening && state === \"response\") {\n      if (transcript.toLowerCase().includes(\"clear\")) {\n        resetTranscript();\n        updateState(\"ambient\");\n      }\n    }\n  }\n\n  useInterval(() => {\n    if (transcript !== '' && state === \"listening\") {\n      const timeDiff = (new Date() - lastTranscriptUpdate) / 1000;\n      let timeTreshold = 2;\n      if (transcript.includes(\"add weight\")) {\n        timeTreshold = 60;\n      }\n      const weightMetrics = [\"lb\", \"bmi\", \"bone mass\", \"body fat\", \"muscle mass\", \"send\"];\n      if (transcript.includes(\"add weight\")) {\n        let allClear = true;\n        for (const metric of weightMetrics) {\n          if (!transcript.toLowerCase().includes(metric)) {\n            console.log(\"missing \" + metric);\n            allClear = false;\n          }\n        }\n        if (allClear) {\n          timeTreshold = 0;\n        }\n      }\n      if (timeDiff > timeTreshold) {\n        endSession();\n      }\n    }\n  }, transcript !== '' && state === \"listening\" ? 1000 : null);\n\n  const props = {\n    message,\n    intentResponse,\n    transcript: state === 'listening' ? transcript : '',\n    startSession,\n    state,\n    updateState\n  }\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const device = urlParams.get('device');\n  if (device === \"pi\") {\n    return PiApp(props)\n  } else {\n    return App(props);\n  }\n}\n\nfunction App({\n  message,\n  listening,\n  stopListening,\n  startSession,\n  transcript\n}) {\n  return (\n    <div className=\"app-container\">\n      <h2 className=\"greeting\">{message}</h2>\n      <div className=\"voice-icon-wrapper\" onClick={() => { listening ? stopListening() : startSession({ continuous: true }) }}>\n        <img className=\"voice-icon\"\n          src=\"https://cdn.dribbble.com/users/32512/screenshots/5668419/calm_ai_design_by_gleb.gif\"\n          alt=\"\"\n        />\n      </div>\n      <p className=\"transcript\"><em>{transcript}</em></p>\n      <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@200&display=swap\" rel=\"stylesheet\" />\n    </div>\n  );\n}\n\nconst send = ({ transcript, setMessage, setIntent, updateState, onAudioFinish }) => {\n  const simulateProd = false;\n  const host = simulateProd || process.env.NODE_ENV === \"production\" ? \"https://api.sahilkapur.com\" : \"http://localhost:8080\";\n  const endpoint = \"/setIntent\";\n  const params = \"?transcript=\" + transcript.toLowerCase();\n  try {\n    fetch(host + endpoint + params)\n      .then(response => {\n        if (response.status === 200) {\n          return response.json();\n        } else {\n          setMessage(\"Error in request\");\n          updateState(\"Error\");\n          throw Error(`Request rejected`)\n        }\n      }).then(data => {\n        const { intent, message } = data;\n        setIntent(intent);\n        setMessage(message);\n        updateState(\"response\");\n        actionLauncher({ data, updateState });\n        const audio = new Audio(host + '/audioFile?fileName=' + data.fileName);\n        audio.play();\n        audio.addEventListener(\"ended\", data => onAudioFinish(data));\n      }).catch(error => {\n        console.error(error);\n        updateState(\"error\");\n        setMessage(error.message);\n      });\n  } catch (error) {\n    alert();\n  }\n}\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default Index;\n","export default function actionLauncher({ data, updateState }) {\n  const { message, intent } = data;\n\n  if (intent === \"launch\") {\n    window.open(data.url);\n  } else if (intent === \"hardwareSleepIntent\" || intent === \"closeShopIntent\") {\n    updateState(\"sleep\");\n  } else if (intent === \"pullLatestVersion\") {\n    if (data.update)\n      setTimeout(() => window.location.reload(), 6000);\n  }\n\n  return { message, intent };\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}