{"version":3,"sources":["actionLauncher.js","App.js","serviceWorker.js","index.js"],"names":["actionLauncher","data","setMessage","intent","code","window","open","url","app","message","send","a","transcript","startListening","resetTranscript","params","toLowerCase","fetch","then","response","json","setTimeout","App","useState","lastTranscriptUpdate","setUpdateTime","useSpeechRecognition","listening","useEffect","Date","SpeechRecognition","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","className","onClick","stopListening","continuous","src","href","rel","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"kQAAe,SAASA,EAAT,GAA+C,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,WACzB,YAAhBD,EAAKE,QAAsBD,EAAW,6BACxB,MAAdD,EAAKG,MAIW,WAAhBH,EAAKE,QACPE,OAAOC,KAAKL,EAAKM,KACjBL,EAAW,aAAeD,EAAKO,IAAM,QALrCN,EAAWD,EAAKQ,S,MC6CpB,IAAMC,EAAI,uCAAG,mCAAAC,EAAA,sDAASC,EAAT,EAASA,WAAT,EAAqBC,eAAgBC,EAArC,EAAqCA,gBAAiBZ,EAAtD,EAAsDA,YAC5C,EACoD,uCACnEa,EAAS,eAAiBH,EAAWI,cAC3CC,MAFyE,uCAExDF,GACdG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAjB,GACJD,EAAe,CAAEC,OAAMC,kBAE3BmB,YAAW,WACTP,MACC,KAXQ,2CAAH,sDAkCKQ,MA7Ef,WAAgB,IAAD,EACiBC,mBAAS,iBAD1B,mBACNd,EADM,KACGP,EADH,OAEiCqB,mBAAS,MAF1C,mBAENC,EAFM,KAEgBC,EAFhB,OAGsCC,iCAA3CC,EAHK,EAGLA,UAAWf,EAHN,EAGMA,WAAYE,EAHlB,EAGkBA,gBA2B/B,OAzBAc,qBAAU,WACJD,GACFzB,EAAW,eACXuB,EAAc,IAAII,OAElB3B,EAAW,iBAERyB,GAA4B,KAAff,GAChBF,EAAK,CAAEE,aAAYC,eAAgBiB,IAAkBjB,eAAgBC,kBAAiBZ,iBAEvF,CAACyB,IAEJC,qBAAU,kBAAMH,EAAc,IAAII,QAAS,CAACjB,IAwC9C,SAAqBmB,EAAUC,GAC7B,IAAMC,EAAgBC,mBAGtBN,qBAAU,WACRK,EAAcE,QAAUJ,IACvB,CAACA,IAGJH,qBAAU,WAIR,GAAc,OAAVI,EAAgB,CAClB,IAAII,EAAKC,aAJX,WACEJ,EAAcE,YAGaH,GAC3B,OAAO,kBAAMM,cAAcF,OAE5B,CAACJ,IAvDJO,EAAY,WACS,KAAf3B,GAAqBe,KACL,IAAIE,KAASL,GAAwB,IACxC,IACbtB,EAAW,iBACXY,IACAJ,EAAK,CAAEE,aAAYC,eAAgBiB,IAAkBjB,eAAgBC,kBAAiBZ,mBAG1E,KAAfU,EAAoB,IAAO,MAG5B,6BACE,wBAAI4B,UAAU,YAAY/B,GAC1B,yBAAK+B,UAAU,aAAaC,QAAS,kBAAMd,EAAYG,IAAkBY,gBAAkBZ,IAAkBjB,eAAe,CAAE8B,YAAY,KACxIC,IAAI,wFACN,yBAAKJ,UAAU,cACf,uBAAGA,UAAU,cAAa,4BAAK5B,IAC/B,0BAAMiC,KAAK,4EAA4EC,IAAI,iBC9B7EC,QACW,cAA7B1C,OAAO2C,SAASC,UAEe,UAA7B5C,OAAO2C,SAASC,UAEhB5C,OAAO2C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMrD,a","file":"static/js/main.d48eea8c.chunk.js","sourcesContent":["export default function actionLauncher({ data, setMessage }) {\n  if (data.intent === \"unknown\") setMessage(\"I don't quite understand.\");\n  if (data.code !== 200) {\n    setMessage(data.message);\n    return;\n  }\n  if (data.intent === \"launch\") {\n    window.open(data.url);\n    setMessage(\"Launching \" + data.app + \"...\");\n  } else {\n    setMessage(data.message);\n  }\n\n}","import React, { useState, useEffect, useRef } from \"react\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport actionLauncher from \"./actionLauncher\";\nimport \"./App.css\"\n\nfunction App() {\n  const [message, setMessage] = useState(\"Hello, Sahil.\");\n  const [lastTranscriptUpdate, setUpdateTime] = useState(null);\n  const { listening, transcript, resetTranscript } = useSpeechRecognition();\n\n  useEffect(() => {\n    if (listening) {\n      setMessage(\"Go ahead...\");\n      setUpdateTime(new Date());\n    } else {\n      setMessage(\"Hello, Sahil.\");\n    }\n    if (!listening && transcript !== '') {\n      send({ transcript, startListening: SpeechRecognition.startListening, resetTranscript, setMessage })\n    }\n  }, [listening]);\n\n  useEffect(() => setUpdateTime(new Date()), [transcript]);\n\n  useInterval(() => {\n    if (transcript !== '' && listening) {\n      const timeDiff = (new Date() - lastTranscriptUpdate) / 1000;\n      if (timeDiff > 2) {\n        setMessage(\"processing...\")\n        resetTranscript();\n        send({ transcript, startListening: SpeechRecognition.startListening, resetTranscript, setMessage })\n      }\n    }\n  }, transcript !== '' ? 1000 : null);\n\n  return (\n    <div>\n      <h2 className=\"greeting\">{message}</h2>\n      <img className=\"voice-icon\" onClick={() => listening ? SpeechRecognition.stopListening() : SpeechRecognition.startListening({ continuous: true })}\n        src=\"https://cdn.dribbble.com/users/32512/screenshots/5668419/calm_ai_design_by_gleb.gif\" />\n      <div className=\"listening\" />\n      <p className=\"transcript\"><em>{transcript}</em></p>\n      <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@200&display=swap\" rel=\"stylesheet\" />\n\n    </div>\n  );\n}\n\nconst send = async ({ transcript, startListening, resetTranscript, setMessage }) => {\n  const simulateProd = false;\n  const endpoint = simulateProd || process.env.NODE_ENV === \"production\" ? \"https://api.sahilkapur.com/setIntent\" : \"http://localhost:8080/setIntent\";\n  const params = \"?transcript=\" + transcript.toLowerCase();\n  fetch(endpoint + params)\n    .then(response => response.json())\n    .then(data => {\n      actionLauncher({ data, setMessage });\n    });\n  setTimeout(() => {\n    resetTranscript();\n  }, 1000);\n}\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}